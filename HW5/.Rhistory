#   for (i in 2:length(period))
#   {
#     mult = mult*(1+data[i])
#   }
#   geomean = mult^(1/length(period))
#   return(geomean)
# }
##day------------------------------
n = length(data$vwretd)
vwretd = as.vector(data$vwretd)
g_day = 1+vwretd[1]
for (i in 2:n)
{
g_day = g_day*(1+vwretd[i])
}
g_day = g_day^(1/n)-1
g_day_annu = (1+g_day)^365-1
##month------------------------------
g_month = 1
n_month = (2018-1972)*12
for (i in 1:n_month)
{
month = as.vector(last(first(data, paste(i, "month", sep = " ")), "1 month"))
n = length(month)
month_day = 1
for (j in 1:n)
{
month_day = month_day*(1+month[j])
}
month_day = month_day^(1/n)-1
g_month = g_month*(1+month_day)
}
g_month = g_month^(1/n_month)-1
g_month_annu = (1+g_month)^(365)-1
##year------------------------------
g_year = 1
n_year = 2018-1972
for (i in 1:n_year)
{
year = as.vector(last(first(data, paste(i, "year", sep = " ")), "1 year"))
n = length(year)
year_day = 1
for (j in 1:n)
{
year_day = year_day*(1+year[j])
}
year_day = year_day^(1/n)-1
g_year = g_year*(1+year_day)
}
g_year = g_year^(1/n_year)-1
g_year_annu = (1+g_year)^365-1
##5year------------------------------
g_5year = 1
n_5year = (2017-1972)/5
for (i in 1:n_5year)
{
year5 = as.vector(last(first(data, paste(i*5, "year", sep = " ")), "5 year"))
n = length(year5)
year5_day = 1
for (j in 1:n)
{
year5_day = year5_day*(1+year5[j])
}
year5_day = year5_day^(1/n)-1
g_5year = g_5year*(1+year5_day)
}
g_5year = g_5year^(1/n_5year)-1
g_5year_annu = (1+g_5year)^(365)-1
##non-annu and annu------------------------------
non_annualized_geo = c(g_day, g_month, g_year, g_5year)
annualized_geo = c(g_day_annu, g_month_annu, g_year_annu, g_5year_annu)
#read in data
data = read.csv("p5-sp500.csv")
#transform data
library("xts")
data = transform(data, caldt = as.Date(as.character(caldt), "%Y%m%d"))
data = xts(data$vwretd, order.by = data$caldt)
names(data) = "vwretd"
#Arithmetic---------------------------------------------------------------------
##day------------------------------
a_day = mean(data$vwretd)
a_day_annu = mean(data$vwretd)*365
##month------------------------------
# a_month = 0
# n_month = (2018-1972)*12
# for (i in 1:n_month)
# {
#   month = as.vector(last(first(data, paste(i, "month", sep = " ")), "1 month"))
#   a_month = a_month + mean(month)
# }
# a_month = a_month/n_month
month = apply.monthly(data, mean)
a_month = mean(as.vector(month))
a_month_annu = a_month*365
##year------------------------------
# a_year = 0
# n_year = (2018-1972)
# for (i in 1:n_year)
# {
#   year = as.vector(last(first(data, paste(i, "year", sep = " ")), "1 year"))
#   a_year = a_year + mean(year)
# }
# a_year = a_year/n_year
year = apply.yearly(data, mean)
a_year = mean(year)
a_year_annu = a_year*365
##5year------------------------------
a_5year = 0
n_5year = (2017-1972)/5
for (i in 1:n_5year)
{
year5 = as.vector(last(first(data, paste(i*5, "year", sep = " ")), "5 year"))
a_5year = a_5year + mean(year5)
}
a_5year = a_5year/n_5year
a_5year_annu = a_5year*365
##non-annu and annu------------------------------
non_annualized = c(a_day, a_month, a_year, a_5year)
annualized = c(a_day_annu, a_month_annu, a_year_annu, a_5year_annu)
#Geometric---------------------------------------------------------------------
##function------------------------------
# geo = function(period)
# {
#   mult = 1+period[1]
#   for (i in 2:length(period))
#   {
#     mult = mult*(1+data[i])
#   }
#   geomean = mult^(1/length(period))
#   return(geomean)
# }
##day------------------------------
n = length(data$vwretd)
vwretd = as.vector(data$vwretd)
g_day = 1+vwretd[1]
for (i in 2:n)
{
g_day = g_day*(1+vwretd[i])
}
g_day = g_day^(1/n)-1
g_day_annu = (1+g_day)^365-1
##month------------------------------
g_month = 1
n_month = (2018-1972)*12
for (i in 1:n_month)
{
month = as.vector(last(first(data, paste(i, "month", sep = " ")), "1 month"))
n = length(month)
month_day = 1
for (j in 1:n)
{
month_day = month_day*(1+month[j])
}
month_day = month_day^(1/n)-1
g_month = g_month*(1+month_day)
}
g_month = g_month^(1/n_month)-1
g_month_annu = (1+g_month)^(365)-1
##year------------------------------
g_year = 1
n_year = 2018-1972
for (i in 1:n_year)
{
year = as.vector(last(first(data, paste(i, "year", sep = " ")), "1 year"))
n = length(year)
year_day = 1
for (j in 1:n)
{
year_day = year_day*(1+year[j])
}
year_day = year_day^(1/n)-1
g_year = g_year*(1+year_day)
}
g_year = g_year^(1/n_year)-1
g_year_annu = (1+g_year)^365-1
##5year------------------------------
g_5year = 1
n_5year = (2017-1972)/5
for (i in 1:n_5year)
{
year5 = as.vector(last(first(data, paste(i*5, "year", sep = " ")), "5 year"))
n = length(year5)
year5_day = 1
for (j in 1:n)
{
year5_day = year5_day*(1+year5[j])
}
year5_day = year5_day^(1/n)-1
g_5year = g_5year*(1+year5_day)
}
g_5year = g_5year^(1/n_5year)-1
g_5year_annu = (1+g_5year)^(365)-1
##non-annu and annu------------------------------
non_annualized_geo = c(g_day, g_month, g_year, g_5year)
annualized_geo = c(g_day_annu, g_month_annu, g_year_annu, g_5year_annu)
annualized
annualized_geo
mysoln = list(student = c("Hyeuk Jung", "Huanyu Liu", "Jiaqi Li", "Xichen Luo"))
library("xts")
sp500 = read.csv("p5-sp500.csv")
sp500$caldt = as.Date(as.character(sp500$caldt),"%Y%m%d")
rownames(sp500) = sp500[,1]
sp500$caldt = NULL
sp500 = as.xts(sp500)
year_end = endpoints(sp500,"years",k=1)
month_end = endpoints(sp500,"months",k =1)
annual_return = vector()
month_return = vector()
year5_return = vector()
daily_returns = sp500["1972-01-03/2017-12-30"]
daily_return_a = mean(daily_returns) * 365
daily_return_g = prod(daily_returns + 1)^(1/length(daily_returns)) - 1
daily_return_g = (1 + daily_return_g)^365 - 1
for (i in 1:(length(month_end) - 1 )){
returns = as.vector(sp500[(month_end[i] + 1):month_end[i+1]])
month_return[i] = prod(1 + returns) - 1
}
month_return_a = mean(month_return) * 12
month_return_g = prod(month_return + 1)^(1/length(month_return)) - 1
month_return_g = (1 + month_return_g)^12 - 1
for (i in 1:(length(year_end) - 1)){
returns = as.vector(sp500[(year_end[i]+1):year_end[i+1]])
annual_return[i] = prod(1 + returns) - 1
}
annual_return_a = mean(annual_return)
annual_return_g = prod(annual_return + 1)^(1/length(annual_return)) -1
for (i in seq(1,length(year_end) - 6, 5)){
returns = as.vector(sp500[(year_end[i] + 1):year_end[i+5]])
year5_return[i %/% 5 + 1] = prod(returns + 1) - 1
}
year5_return_a = mean(year5_return) / 5
year5_return_g = prod(1 + year5_return)^(1/length(year5_return)) - 1
year5_return_g = (1 + year5_return_g)^(1/5) - 1
mysoln[["Arithmetic"]] = c("daily" = daily_return_a, "monthly" = month_return_a, "annually" = annual_return_a, "5year" = year5_return_a)
mysoln[["Geometric"]] = c("daily" = daily_return_g, "monthly" = month_return_g, "annually" = annual_return_g, "5year" = year5_return_g)
mysoln
# Hyeuk Jung
# MGMTMFE 400-2 Investments (Fall 2018)
# Problems for Lecture 5 - Calculating historical returns
mysoln = list(student = c("Hyeuk Jung", "Huanyu", "Jiaqi", "Xichen"))
library(xts)
df = read.csv("p5-sp500.csv", header = TRUE)
# change row names to dates
df$caldt <- lubridate::ymd(df$caldt)
row.names(df) <- df$caldt
df$caldt <- NULL
# change data frame into xts form
data = as.xts(df)
# calculate price (don't need to)
data$price <- 100/(1 + as.numeric(data$vwretd))
##### Arithmetic return
# 1. Daily
a.daily = mean(data$vwretd)
a.daily.annual = a.daily*365 # annualized
#a.daily.annual = (1+a.daily)^252 or 365
# from other teams, they say we have to compound the results as the given data is APR --> return EAR
# 2. Monthly
a.monthly = apply.monthly(data$vwretd, mean) # values: each month's avg daily return ex. 1972-01-03 ~ 1972-01-31
a.monthly.annual = mean(a.monthly)*365 # annualized
#a.monthly.annual = (1+mean(a.monthly))^252
#sum(data["1972-01-03/1972-01-31", "vwretd"])/21
# 3. Annually
a.yearly = apply.yearly(data$vwretd, mean)
a.yearly.annual = mean(a.yearly)*365 # annualized
# 4. 5-year returns from 1/3/1972 through 12/30/2016
data2 <- data["1972-01-03/2016-12-30"]
r.5y = endpoints(data2, "years", k=5) # save 5y indexes using endpoints function
a.5y <- data.frame(matrix(ncol = 1, nrow = length(r.5y)-1))
colnames(a.5y) <- "5y daily return"
#r.5y <- r.5y[-1]
for( i in c( 1:(length(r.5y)-1) ) ) {
a.5y[i,1] = sum(data2[c(r.5y[i+1]:(r.5y[i]+1)), "vwretd"])/length(c(r.5y[i+1]:(r.5y[i]+1))) # 5y daily return
}
a.5y.annual = mean(a.5y[,1])*365 # annualized
mysoln[["Arithmetic"]] = c("day" = a.daily.annual, "month" = a.monthly.annual, "year" = a.yearly.annual, "5yr" = a.5y.annual)
##### Geometric return
# 1. Daily
n_day = length(data$vwretd)
g.daily = 1+as.numeric(data[1,"vwretd"])
for(i in 2:n_day) {
g.daily <- g.daily * (1 + as.numeric(data[i, "vwretd"])) # compounding daily returns
}
g.daily <- g.daily^(1/n_day) # 1 + average daily return
g.daily.annual <- g.daily^365 - 1 # annualized
# 2. Monthly
n_month = endpoints(data, "months", k=1) # indexes of the end of the months
g.monthly <- data.frame(matrix(ncol = 1, nrow = length(n_month)-1))
compound.monthly = 1
for(i in c( 1:(length(n_month)-1) ) ) {
g.monthly[i,1] = 1 # initialize for compouding
for(j in c( (n_month[i]+1):n_month[i+1] )) {
# ex. n_month[1]+1 ~ n_month[2] -> 1~21 / 22~41 / ... / 11584 ~ 11063
g.monthly[i,1] <- g.monthly[i,1]*(1+as.numeric(data[j,"vwretd"])) # compounding daily returns of each month
}
compound.monthly <- compound.monthly * g.monthly[i,1] # compounding monthly returns
}
compound.monthly <- compound.monthly^(1/(length(n_month)-1)) # 1 + average monthly return
g.monthly.annual <- compound.monthly^12 - 1
# 3. Annually
n_year = endpoints(data, "years", k = 1)
g.yearly <- data.frame(matrix(ncol = 1, nrow = length(n_year)-1))
compound.yearly = 1
for(i in c( 1:(length(n_year)-1) ) ) {
g.yearly[i,1] = 1 # initialize for compouding
for(j in c( (n_year[i]+1):n_year[i+1] )) {
# ex. n_year[1]+1 ~ n_year[2] -> 1~251 / 252~503 / ... / 11353~11603
g.yearly[i,1] <- g.yearly[i,1]*(1+as.numeric(data[j,"vwretd"])) # compounding daily returns of each year
}
compound.yearly <- compound.yearly * g.yearly[i,1] # compounding yearly returns
}
g.yearly.annual <- compound.yearly^(1/(length(n_year)-1)) - 1 # average annual return
#g.monthly.annual <- compound.monthly^12 - 1
# 4. 5-year returns from 1/3/1972 through 12/30/2016
#data2 <- data["1972-01-03/2016-12-30"]
#r.5y = endpoints(data2, "years", k=5) # save 5y indexes using endpoints function
g.5y <- data.frame(matrix(ncol = 1, nrow = length(r.5y)-1))
compound.5y = 1
for(i in c( 1:(length(r.5y)-1) ) ) {
g.5y[i,1] = 1 # initialize for compouding
for(j in c( (r.5y[i]+1):r.5y[i+1] )) {
# ex. r.5y[1]+1 ~ r.5y[2] -> 1~756 / 757~2019 / ... / 10849~11352
g.5y[i,1] <- g.5y[i,1]*(1+as.numeric(data2[j,"vwretd"])) # compounding daily returns of 5 years
}
compound.5y <- compound.5y * g.5y[i,1] # compounding 5yr returns
}
compound.5y <- compound.5y^(1/(length(r.5y)-1)) # 1 + average 5yr return
g.5y.annual <- compound.5y^(1/5) - 1
mysoln[["Geometric"]] = c("day" = g.daily.annual, "month" = g.monthly.annual, "year" = g.yearly.annual, "5yr" = g.5y.annual)
mysoln
list.files()
year_end5 = endpoints(sp500,"years",k=5)
mysoln = list(student = c("Hyeuk Jung", "Huanyu Liu", "Jiaqi Li", "Xichen Luo"))
library("xts")
sp500 = read.csv("p5-sp500.csv")
sp500$caldt = as.Date(as.character(sp500$caldt),"%Y%m%d")
rownames(sp500) = sp500[,1]
sp500$caldt = NULL
sp500 = as.xts(sp500)
year_end = endpoints(sp500,"years",k=1)
month_end = endpoints(sp500,"months",k =1)
year_end5 = endpoints(sp500,"years",k=5)
annual_return = vector()
month_return = vector()
year5_return = vector()
daily_returns = sp500["1972-01-03/2017-12-30"]
daily_return_a = mean(daily_returns) * 365
daily_return_g = prod(daily_returns + 1)^(1/length(daily_returns)) - 1
daily_return_g = (1 + daily_return_g)^365 - 1
for (i in 1:(length(month_end) - 1 )){
returns = as.vector(sp500[(month_end[i] + 1):month_end[i+1]])
month_return[i] = prod(1 + returns) - 1
}
month_return_a = mean(month_return) * 12
month_return_g = prod(month_return + 1)^(1/length(month_return)) - 1
month_return_g = (1 + month_return_g)^12 - 1
for (i in 1:(length(year_end) - 1)){
returns = as.vector(sp500[(year_end[i]+1):year_end[i+1]])
annual_return[i] = prod(1 + returns) - 1
}
annual_return_a = mean(annual_return)
annual_return_g = prod(annual_return + 1)^(1/length(annual_return)) -1
for (i in seq(1,length(year_end) - 6, 5)){
returns = as.vector(sp500[(year_end[i] + 1):year_end[i+5]])
year5_return[i %/% 5 + 1] = prod(returns + 1) - 1
}
year5_return_a = mean(year5_return) / 5
year5_return_g = prod(1 + year5_return)^(1/length(year5_return)) - 1
year5_return_g = (1 + year5_return_g)^(1/5) - 1
mysoln[["Arithmetic"]] = c("daily" = daily_return_a, "monthly" = month_return_a, "annually" = annual_return_a, "5year" = year5_return_a)
mysoln[["Geometric"]] = c("daily" = daily_return_g, "monthly" = month_return_g, "annually" = annual_return_g, "5year" = year5_return_g)
mysoln
head(year_end5)
sp500[756]
month_return_a = vector()
month_return_sum = vector()
annual_return_sum = vector()
year5_return_sum = vector()
mysoln = list(student = c("Hyeuk Jung", "Huanyu Liu", "Jiaqi Li", "Xichen Luo"))
library("xts")
sp500 = read.csv("p5-sp500.csv")
sp500$caldt = as.Date(as.character(sp500$caldt),"%Y%m%d")
rownames(sp500) = sp500[,1]
sp500$caldt = NULL
sp500 = as.xts(sp500)
year_end = endpoints(sp500,"years",k=1)
month_end = endpoints(sp500,"months",k =1)
annual_return = vector()
month_return = vector()
year5_return = vector()
month_return_sum = vector()
annual_return_sum = vector()
year5_return_sum = vector()
daily_returns = sp500["1972-01-03/2017-12-30"]
daily_return_a = mean(daily_returns) * 365
daily_return_g = prod(daily_returns + 1)^(1/length(daily_returns)) - 1
daily_return_g = (1 + daily_return_g)^365 - 1
for (i in 1:(length(month_end) - 1 )){
returns = as.vector(sp500[(month_end[i] + 1):month_end[i+1]])
month_return[i] = prod(1 + returns) - 1
month_return_sum[i] = sum(returns)
}
month_return_a = mean(month_return_sum) * 12
month_return_g = prod(month_return + 1)^(1/length(month_return)) - 1
month_return_g = (1 + month_return_g)^12 - 1
for (i in 1:(length(year_end) - 1)){
returns = as.vector(sp500[(year_end[i]+1):year_end[i+1]])
annual_return[i] = prod(1 + returns) - 1
annual_return_sum[i] = sum(returns)
}
annual_return_a = mean(annual_return_sum)
annual_return_g = prod(annual_return + 1)^(1/length(annual_return)) -1
for (i in seq(1,length(year_end) - 6, 5)){
returns = as.vector(sp500[(year_end[i] + 1):year_end[i+5]])
year5_return[i %/% 5 + 1] = prod(returns + 1) - 1
year5_return_sum = sum(returns)
}
year5_return_a = mean(year5_return_sum) / 5
year5_return_g = prod(1 + year5_return)^(1/length(year5_return)) - 1
year5_return_g = (1 + year5_return_g)^(1/5) - 1
mysoln[["Arithmetic"]] = c("daily" = daily_return_a, "monthly" = month_return_a, "annually" = annual_return_a, "5year" = year5_return_a)
mysoln[["Geometric"]] = c("daily" = daily_return_g, "monthly" = month_return_g, "annually" = annual_return_g, "5year" = year5_return_g)
mysoln
mysoln = list(student = c("Hyeuk Jung", "Huanyu Liu", "Jiaqi Li", "Xichen Luo"))
library("xts")
sp500 = read.csv("p5-sp500.csv")
sp500$caldt = as.Date(as.character(sp500$caldt),"%Y%m%d")
rownames(sp500) = sp500[,1]
sp500$caldt = NULL
sp500 = as.xts(sp500)
year_end = endpoints(sp500,"years",k=1)
month_end = endpoints(sp500,"months",k =1)
annual_return = vector()
month_return = vector()
year5_return = vector()
month_return_sum = vector()
annual_return_sum = vector()
year5_return_sum = vector()
daily_returns = sp500["1972-01-03/2017-12-30"]
daily_return_a = mean(daily_returns) * 365
daily_return_g = prod(daily_returns + 1)^(1/length(daily_returns)) - 1
daily_return_g = (1 + daily_return_g)^365 - 1
for (i in 1:(length(month_end) - 1 )){
returns = as.vector(sp500[(month_end[i] + 1):month_end[i+1]])
month_return[i] = prod(1 + returns) - 1
month_return_sum[i] = sum(returns)
}
month_return_a = mean(month_return_sum) * 12
month_return_g = prod(month_return + 1)^(1/length(month_return)) - 1
month_return_g = (1 + month_return_g)^12 - 1
for (i in 1:(length(year_end) - 1)){
returns = as.vector(sp500[(year_end[i]+1):year_end[i+1]])
annual_return[i] = prod(1 + returns) - 1
annual_return_sum[i] = sum(returns)
}
annual_return_a = mean(annual_return_sum)
annual_return_g = prod(annual_return + 1)^(1/length(annual_return)) -1
for (i in seq(1,length(year_end) - 6, 5)){
returns = as.vector(sp500[(year_end[i] + 1):year_end[i+5]])
year5_return[i %/% 5 + 1] = prod(returns + 1) - 1
year5_return_sum[i] = sum(returns)
}
year5_return_a = mean(year5_return_sum) / 5
year5_return_g = prod(1 + year5_return)^(1/length(year5_return)) - 1
year5_return_g = (1 + year5_return_g)^(1/5) - 1
mysoln[["Arithmetic"]] = c("daily" = daily_return_a, "monthly" = month_return_a, "annually" = annual_return_a, "5year" = year5_return_a)
mysoln[["Geometric"]] = c("daily" = daily_return_g, "monthly" = month_return_g, "annually" = annual_return_g, "5year" = year5_return_g)
mysoln
mysoln = list(student = c("Hyeuk Jung", "Huanyu Liu", "Jiaqi Li", "Xichen Luo"))
library("xts")
sp500 = read.csv("p5-sp500.csv")
sp500$caldt = as.Date(as.character(sp500$caldt),"%Y%m%d")
rownames(sp500) = sp500[,1]
sp500$caldt = NULL
sp500 = as.xts(sp500)
year_end = endpoints(sp500,"years",k=1)
month_end = endpoints(sp500,"months",k =1)
annual_return = vector()
month_return = vector()
year5_return = vector()
month_return_sum = vector()
annual_return_sum = vector()
year5_return_sum = vector()
daily_returns = sp500["1972-01-03/2017-12-30"]
daily_return_a = mean(daily_returns) * 365
daily_return_g = prod(daily_returns + 1)^(1/length(daily_returns)) - 1
daily_return_g = (1 + daily_return_g)^365 - 1
for (i in 1:(length(month_end) - 1 )){
returns = as.vector(sp500[(month_end[i] + 1):month_end[i+1]])
month_return[i] = prod(1 + returns) - 1
month_return_sum[i] = sum(returns)
}
month_return_a = mean(month_return_sum) * 12
month_return_g = prod(month_return + 1)^(1/length(month_return)) - 1
month_return_g = (1 + month_return_g)^12 - 1
for (i in 1:(length(year_end) - 1)){
returns = as.vector(sp500[(year_end[i]+1):year_end[i+1]])
annual_return[i] = prod(1 + returns) - 1
annual_return_sum[i] = sum(returns)
}
annual_return_a = mean(annual_return_sum)
annual_return_g = prod(annual_return + 1)^(1/length(annual_return)) -1
for (i in seq(1,length(year_end) - 6, 5)){
returns = as.vector(sp500[(year_end[i] + 1):year_end[i+5]])
year5_return[i %/% 5 + 1] = prod(returns + 1) - 1
year5_return_sum[i %/% 5 + 1] = sum(returns)
}
year5_return_a = mean(year5_return_sum) / 5
year5_return_g = prod(1 + year5_return)^(1/length(year5_return)) - 1
year5_return_g = (1 + year5_return_g)^(1/5) - 1
mysoln[["Arithmetic"]] = c("daily" = daily_return_a, "monthly" = month_return_a, "annually" = annual_return_a, "5year" = year5_return_a)
mysoln[["Geometric"]] = c("daily" = daily_return_g, "monthly" = month_return_g, "annually" = annual_return_g, "5year" = year5_return_g)
mysoln
