(0.02 +0.32)/2
rf
slope
(0.05 + 0.2)/2 - 0.08
b.a
class(rf)
rf
0.17 - (0.08 + 0.045 * 2)
0.17 - (0.08 + 0.045 * 2)
round(2.775558e-17,4)
#1--------------------------
#a)
ret.CAPM = 0.05 + 1.4*0.06
print(ret.CAPM)
#b)
p.now = 35
p.next = p.now*(1+ret.CAPM)
print(p.next)
#c)
div = 2
p.div = p.next - div
print(p.div)
#2--------------------------
#a)
b.a = (0.32-0.02)/(0.2-0.05)
b.d = (0.14-0.035)/(0.2-0.05)
beta = c(b.a,b.d)
names(beta) = c("aggressive", "defensive")
print(c(b.a,b.d))
#b)
ret.a = (0.02+0.32)/2
ret.d = (0.035+0.14)/2
return = c(ret.a,ret.d)
names(return) = c("aggressive", "defensive")
print(c(ret.a,ret.d))
#c)
ret.mkt = 0.5*0.05 + 0.5*0.2
limit.b = c(0,1)
limit.E = c(0.08, ret.mkt)
plot(limit.b,limit.E, type = "l", xlim = c(0,3), ylim = c(0,0.3),
main = "Security Market Line", col = "green")
rf = 0.08
slope = ret.mkt-0.08
abline(rf,slope, col = "green", lwd = 2)
#d)
points(b.a,ret.a, pch = 19, col = "red")
points(b.d,ret.d, pch = 19, col = "blue")
text(b.a, ret.a, labels = "Aggressive", pos = 3)
text(b.d,ret.d, labels = "Defensive", pos = 1)
a.a = ret.a - (rf+slope*b.a)
a.d = ret.d - (rf+slope*b.d)
a = c(a.a,a.d)
names(a) = c("aggressive", "defensive")
print(a)
#3--------------------------------
#a)
library(readxl)
MSFT = read_excel("lecture8p.xlsx", sheet = "MSFT")
INTC = read_excel("lecture8p.xlsx", sheet = "INTC")
LUV = read_excel("lecture8p.xlsx", sheet = "LUV")
MCD = read_excel("lecture8p.xlsx", sheet = "MCD")
JNJ = read_excel("lecture8p.xlsx", sheet = "JNJ")
FF = read_excel("lecture8p.xlsx", sheet = "F-F_Research_Data_Factors_daily",skip = 4)
library(xts)
FF.xts = xts(FF, order.by = as.Date(as.character(FF$X__1), "%Y%m%d"))
start = MSFT$Date[1]
FF.xts = FF.xts["1989-12-29/"]
FF = data.frame(FF.xts)
MSFT.zoo = read.zoo(MSFT)
INTC.zoo = read.zoo(INTC)
LUV.zoo = read.zoo(LUV)
MCD.zoo = read.zoo(MCD)
JNJ.zoo = read.zoo(JNJ)
MSFT.xts = as.xts(MSFT.zoo)
INTC.xts = as.xts(INTC.zoo)
MCD.xts = as.xts(MCD.zoo)
LUV.xts = as.xts(LUV.zoo)
JNJ.xts = as.xts(JNJ.zoo)
library(quantmod)
ret.MSFT = dailyReturn(MSFT.xts$`Adj Close`)
ret.INTC = dailyReturn(INTC.xts$`Adj Close`)
ret.LUV = dailyReturn(LUV.xts$`Adj Close`)
ret.MCD = dailyReturn(MCD.xts$`Adj Close`)
ret.JNJ = dailyReturn(JNJ.xts$`Adj Close`)
diff.MSFT = (ret.MSFT$daily.returns-FF$RF/100)
diff.INTC = (ret.INTC$daily.returns-FF$RF/100)
diff.LUV = (ret.LUV$daily.returns-FF$RF/100)
diff.MCD = (ret.MCD$daily.returns-FF$RF/100)
diff.JNJ = (ret.JNJ$daily.returns-FF$RF/100)
FF.percent = (FF$Mkt.RF/100)
lm.MSFT = lm(diff.MSFT~FF.percent)
lm.INTC = lm(diff.INTC~FF.percent)
lm.LUV = lm(diff.LUV~FF.percent)
lm.MCD = lm(diff.MCD~FF.percent)
lm.JNJ = lm(diff.JNJ~FF.percent)
sum.MSFT = summary(lm.MSFT)
sum.INTC = summary(lm.INTC)
sum.LUV = summary(lm.LUV)
sum.MCD = summary(lm.MCD)
sum.JNJ = summary(lm.JNJ)
beta = c(sum.MSFT$coefficients[2], sum.INTC$coefficients[2],
sum.LUV$coefficients[2], sum.MCD$coefficients[2], sum.JNJ$coefficients[2])
std.beta = c(sum.MSFT$coefficients[2,2], sum.INTC$coefficients[2,2],
sum.LUV$coefficients[2,2], sum.MCD$coefficients[2,2], sum.JNJ$coefficients[2,2])
beta.info = data.frame(rbind(beta,std.beta)); names(beta.info) = c("MSFT", "INTC", "LUV", "MCD", "JNJ")
print(beta.info)
#b)
alpha = c(sum.MSFT$coefficients[1], sum.INTC$coefficients[1],
sum.LUV$coefficients[1], sum.MCD$coefficients[1], sum.JNJ$coefficients[1])
std.alpha = alpha = c(sum.MSFT$coefficients[1,2], sum.INTC$coefficients[1,2],
sum.LUV$coefficients[1,2], sum.MCD$coefficients[1,2], sum.JNJ$coefficients[1,2])
alpha.info = data.frame(rbind(alpha,std.alpha)); names(alpha.info) = c("MSFT", "INTC", "LUV", "MCD", "JNJ")
print(alpha.info)
#c)
name = c("MSFT", "INTC", "LUV", "MCD", "JNJ")
h.ret = which(beta == max(beta))
l.ret = which(beta == min(beta))
print(paste("CAPM: highest is ", name[h.ret]))
print(beta.info[h.ret])
print(paste("CAPM: lowest is ", name[l.ret]))
print(beta.info[l.ret])
mret.MSFT = mean(ret.MSFT)
mret.INTC = mean(ret.INTC)
mret.LUV = mean(ret.LUV)
mret.MCD = mean(ret.MCD)
mret.JNJ = mean(ret.JNJ)
mret = c(mret.MSFT,mret.INTC,mret.LUV,mret.MCD,mret.JNJ)
h.pos = which(mret == max(mret))
l.pos = which(mret == min(mret))
print(paste("Mean: highest is ", name[h.pos]))
print(paste("Mean: lowest is ", name[l.pos]))
library("readxl")
market_premium = 0.06
beta = 1.4
rf = 0.05
p0 = 35
#1a
capm_return = beta * market_premium + rf
#1b
p1 = p0 * (1 + capm_return)
#1c
dividend = 2
p1_d = p0 * (1 + capm_return) - dividend
#2a
# 0.02 - rf = beta_agg * (0.05 - rf)
# 0.32 - rf = beta_agg * (0.20 - rf)
beta_agg = 2
# 0.035 - rf = beta_def * (0.05 - rf)
# 0.14 - rf = beta_def * (0.2 - rf)
beta_def = 0.7
#2b
tbill = 0.08
return_agg = (tbill + beta_agg * (0.05 - tbill)) * 0.5 + 0.5 * (tbill + beta_agg * (0.2 - tbill))
return_def = (tbill + beta_def * (0.05 - tbill)) * 0.5 + 0.5 * (tbill + beta_def * (0.2 - tbill))
#2c
slope = (return_agg - return_def)/(beta_agg - beta_def)
plot(type="l",x=c(beta_agg,beta_def),y=c(return_agg,return_def),xlab = "Beta(R)",ylab = "E(R)",col = "blue",xlim = c(0,3),ylim = c(0,0.3))
abline(tbill,slope, col = "blue")
points(beta_agg,return_agg,pch=19,col="red")
points(beta_def,return_def,pch = 19, col="green")
text(beta_agg,return_agg,pch=19,col="red",labels = "Aggressive",pos = 3)
text(beta_def,return_def,pch=19,col="green",labels = "Defensive",pos = 1)
companies = c("MSFT","INTC","LUV","MCD","JNJ")
data = data.frame(msft=0,intc=0,luv=0,mcd=0,jnj=0)
colnames(data) = companies
msft = read_excel("lecture8p.xlsx",sheet = "MSFT")
intc = read_excel("lecture8p.xlsx",sheet = "INTC")
luv = read_excel("lecture8p.xlsx",sheet = "LUV")
mcd = read_excel("lecture8p.xlsx", sheet = "MCD")
jnj = read_excel("lecture8p.xlsx", sheet = "JNJ")
rf = read_excel("lecture8p.xlsx", sheet = "F-F_Research_Data_Factors_daily", skip = 4)
rf = rf[rf$X__1 >= "19900101",]
rf = rf/100
data = cbind(msft$`Adj Close`,intc$`Adj Close`,luv$`Adj Close`,mcd$`Adj Close`,jnj$`Adj Close`)
colnames(data) = companies
for (i in 1:5){
return = data[-1,i] / data[-nrow(data),i] - 1
data[-1,i] = return
}
data = data[-1,]
msft_lm = lm((data[,1] - rf$RF) ~ rf$`Mkt-RF`)
intc_lm = lm((data[,2] - rf$RF) ~ rf$`Mkt-RF`)
luv_lm = lm((data[,3] - rf$RF) ~ rf$`Mkt-RF`)
mcd_lm = lm((data[,4] - rf$RF) ~ rf$`Mkt-RF`)
jnj_lm = lm((data[,5] - rf$RF) ~ rf$`Mkt-RF`)
alpha_beta_msft = summary(msft_lm)$coef[,1:2]
rownames(alpha_beta_msft) = c("alpha","beta")
colnames(alpha_beta_msft) = c("estimates","standard deviation")
idiosyncratic_msft = summary(msft_lm)$sigma
alpha_beta_intc = summary(intc_lm)$coef[,1:2]
rownames(alpha_beta_intc) = c("alpha","beta")
colnames(alpha_beta_intc) = c("estimates","standard deviation")
idiosyncratic_intc = summary(intc_lm)$sigma
alpha_beta_luv = summary(luv_lm)$coef[,1:2]
rownames(alpha_beta_luv) = c("alpha","beta")
colnames(alpha_beta_luv) = c("estimates","standard deviation")
idiosyncratic_luv = summary(luv_lm)$sigma
alpha_beta_mcd = summary(mcd_lm)$coef[,1:2]
rownames(alpha_beta_mcd) = c("alpha","beta")
colnames(alpha_beta_mcd) = c("estimates","standard deviation")
idiosyncratic_mcd = summary(mcd_lm)$sigma
alpha_beta_jnj = summary(jnj_lm)$coef[,1:2]
rownames(alpha_beta_jnj) = c("alpha","beta")
colnames(alpha_beta_jnj) = c("estimates","standard deviation")
idiosyncratic_jnj = summary(jnj_lm)$sigma
highest_return = max(c(alpha_beta_msft["beta","estimates"],alpha_beta_intc["beta","estimates"],alpha_beta_luv["beta","estimates"],alpha_beta_mcd["beta","estimates"],alpha_beta_jnj["beta","estimates"]))
mean_returns = matrix(nrow = 1,ncol = 5)
mean_returns[1,] = c(alpha_beta_msft["beta","estimates"],alpha_beta_intc["beta","estimates"],alpha_beta_luv["beta","estimates"],alpha_beta_mcd["beta","estimates"],alpha_beta_jnj["beta","estimates"])
colnames(mean_returns) = companies
high_mean = names(mean_returns[,which(mean_returns[1,] == max(mean_returns[1,]))])
low_mean = names(mean_returns[,which(mean_returns[1,] == min(mean_returns[1,]))])
returns = matrix(nrow = 1,ncol = 5)
for (i in 1:5){
returns[1,i] = mean(data[,i])
}
colnames(returns) = companies
names(returns) = companies
high = names(returns[,which(returns[1,] == max(returns[1,]))])
low = names(returns[,which(returns[1,] == min(returns[1,]))])
alpha_beta_msft
alpha_beta_intc
alpha_beta_luv
alpha_beta_mcd
alpha_beta_jnj
View(data)
idiosyncratic_msft
idiosyncratic_intc
idiosyncratic_luv
idiosyncratic_mcd
idiosyncratic_jnj
high_mean
low_mean
high
low
# MGMTMFE400-2 Investments
# Problems for Lectures 8
# Hyeuk Jung
##### Q1 ----------------------------------------
capm <- function(beta, rf, rm.rf, price = 0, div = 0) {
if(div == 0 | price == 0) {
# E(R) - Rf = beta(Rm - Rf) --> risk-adjusted expected return = E(R) - Rf
print("1st case")
expected.r <- rf+ beta*rm.rf
}
else if(div != 0 && price != 0) {
# E(R) = Rf + beta(Rm - Rf) + dividend yield
expected.r <- rf + beta*rm.rf + div/price
}
expected.price <- price*(1 + expected.r) # CHECK NEEDED (Rf should be added or not?)
data.frame(
expected.r = expected.r,
expected.price = expected.price
)
}
# 1. (a), (b)
beta = 1.4; rf = 0.05; rm.rf = 0.06; price = 35
q1_ab <- capm(beta, rf, rm.rf, price)
# 1. (c) dividend $2
q1_c <- capm(beta, rf, rm.rf, price, div = 2)
##### Q2 ----------------------------------------
# 2. (a)
# Aggressive
# 0.02 - rf = beta(0.05 - rf)
# 0.32 - rf = beta(0.2 - rf)
# (0.02-rf)/(0.05-rf) = (0.32-rf)/(0.2-rf) -> rf = 0.08 -> beta = 2
# Defensive
# 0.035 - rf = beta(0.05 - rf)
# 0.14 - rf = beta(0.2 - rf)
# (0.035-rf)/(0.05-rf) = (0.14-rf)/(0.2-rf) -> rf = 0.067 -> beta = 1.9023
q2_a <- matrix(c(0.08, 2, 0.067, 1.9023), nrow = 2, ncol = 2, byrow = T,
dimnames = list(c("Aggressive", "Defensive"), c("Rf", "Beta")))
# 2. (b)
# Aggressive
agg_rf = 0.08; agg_beta = 2
agg.r.05 <- capm(agg_beta, agg_rf, rm.rf = 0.05 - agg_rf)$expected.r # E(R_aggressive) = rf + beta*(rm-rf) = 0.02
agg.r.2 <- capm(agg_beta, agg_rf, rm.rf = 0.2 - agg_rf)$expected.r   # E(R_aggressive) = rf + beta*(rm-rf) = 0.32
# Defensive
def_rf = 0.067; def_beta = 1.90
def.r.05 <- capm(def_beta, def_rf, rm.rf = 0.05 - def_rf)$expected.r # E(R_defensive) = rf + beta*(rm-rf) = 0.0347
def.r.2 <- capm(def_beta, def_rf, rm.rf = 0.2 - def_rf)$expected.r   # E(R_defensive) = rf + beta*(rm-rf) = 0.3197
q2_b <- matrix(c(agg.r.05, agg.r.2, def.r.05, def.r.2), nrow = 2, ncol = 2, byrow = T,
dimnames = list(c("Aggressive", "Defensive"), c("E(R), Rm = .05", "E(R), Rm = .2")))
# 2. (c)
rf = 0.08
rm_1 = 0.05; slope.05 <- (rm_1 - rf - rf)/1
rm_2 = 0.2; slope.2 <- (rm_2 - rf - rf)/1
x = c(0, 1, 1)
y = c(rf, rm_1 - rf, rm_2 - rf)
plot(x, y, xlim = c(0, 2.2), pch = 20, ylim = c(-0.15, 0.3), xlab = "Beta", ylab = "Expected return", main = "Security Market Lines")
abline(a = rf, b = slope.05, col = "blue")
abline(a = rf, b = slope.2, col = "red")
text(1, rm_1, labels = paste("slope = ", slope.05), pos = 1, col = "blue")
text(1, rm_2, labels = paste("slope = ", slope.2), pos = 1, col = "red")
legend("topleft", legend = c("SML: Rm = 0.2", "SML: Rm = 0.05"), lty = 1, col = c("red", "blue"), cex = 1)
# 2. (d)
# Aggressive
agg.ex.05 = agg.r.05 - 0.08 # excess return when Rm = 0.05, Rf = 0.08
points(agg_beta, agg.ex.05, pch = 20, col = "blue")
text(agg_beta, agg.ex.05, labels = "Aggressive (Rm: 0.05)", pos = 3, cex = .7, col = "blue")
agg.a.05 = agg.ex.05 - slope.05*agg_beta # 0.16
agg.ex.2 = agg.r.2 - 0.08 # excess return when Rm = 0.2, Rf = 0.08
points(agg_beta, agg.ex.2, pch = 20, col = "red")
text(agg_beta, agg.ex.2, labels = "Aggressive (Rm: 0.2)", pos = 2, cex = .7, col = "red")
agg.a.2 = agg.ex.2 - slope.2*agg_beta # 0.16
# Defensive
def.ex.05 = capm(def_beta, rf = 0.08, rm.rf = 0.05 - 0.08)$expected.r - 0.08
points(def_beta, def.ex.05, pch = 20, col = "blue")
text(def_beta, def.ex.05, labels = "Defensive (Rm: 0.05)", pos = 1, cex = .7, col = "blue")
def.a.05 = def.ex.05 - slope.05*def_beta # 0.152
def.ex.2 = capm(def_beta, rf = 0.08, rm.rf = 0.2 - 0.08)$expected.r - 0.08
points(def_beta, def.ex.2, pch = 20, col = "red")
text(def_beta, def.ex.2, labels = "Defensive (Rm: 0.2)", pos = 2, cex = .7, col = "red")
def.a.2 = def.ex.2 - slope.2*def_beta # 0.152
abline(v = agg_beta, lty = 2, col = "grey")
abline(v = def_beta, lty = 2, col = "grey")
q2_d <- matrix(c(agg.a.05, agg.a.2, def.a.05, def.a.2), nrow = 2, ncol = 2, byrow = T,
dimnames = list(c("Aggressive", "Defensive"), c("Alpha(Rm = .05)", "Alpha(Rm = .2)")))
##### Q3 ----------------------------------------
library(magrittr)
library(xts)
library(data.table)
library(readxl)
# Load Data
msft <- read_xlsx("lecture8p.xlsx", sheet = "MSFT") %>% as.data.table; gc()
intc <- read_xlsx("lecture8p.xlsx", sheet = "INTC") %>% as.data.table; gc()
luv	 <- read_xlsx("lecture8p.xlsx", sheet = "LUV")  %>% as.data.table; gc()
mcd	 <- read_xlsx("lecture8p.xlsx", sheet = "MCD")  %>% as.data.table; gc()
jnj	 <- read_xlsx("lecture8p.xlsx", sheet = "JNJ")  %>% as.data.table; gc()
rf <- read_xlsx("lecture8p.xlsx", sheet = "F-F_Research_Data_Factors_daily", skip = 4) %>% as.data.table; gc()
# change column name and delete unused columns in rf
names(rf)[1] <- "Date"
rf[, names(rf)[3:4] := list(NULL, NULL)]
# convert to Date
msft[, Date := as.Date(as.character(Date))]
intc[, Date := as.Date(as.character(Date))]
luv[, Date := as.Date(as.character(Date))]
mcd[, Date := as.Date(as.character(Date))]
jnj[, Date := as.Date(as.character(Date))]
rf[, Date := as.Date(as.character(Date), format = "%Y%m%d")]
colnames(msft)[6] <- "msft"
colnames(intc)[6]<- "intc"
colnames(luv)[6]<- "luv"
colnames(mcd)[6]<- "mcd"
colnames(jnj)[6]<- "jnj"
msft <- msft[, .(Date, msft)]
intc <- intc[, .(Date, intc)]
luv	<- luv[, .(Date, luv)]
mcd	<- mcd[, .(Date, mcd)]
jnj	<- jnj[, .(Date, jnj)]
setkey(msft, Date)
setkey(intc, Date)
setkey(luv, Date)
setkey(mcd, Date)
setkey(jnj, Date)
setkey(rf, Date)
# merge data
data <-rf[msft[intc[luv[mcd[jnj]]]]]
# RF and Mkt-RF: convert to weekly returns
# riskless rate and market premium
with(data, data[, RF := ((1 + RF/100)^5 - 1)])
with(data, data[, `Mkt-RF` := ((1 + `Mkt-RF`/100)^5 - 1)])
# calculate weekly reutrns
weeks <- endpoints(data[["Date"]], on = "weeks")
data <- data[weeks, ]
data[, msft := msft / shift(msft) - 1]
data[, intc := intc / shift(intc) - 1]
data[, luv := luv / shift(luv) - 1]
data[, mcd := mcd / shift(mcd) - 1]
data[, jnj := jnj / shift(jnj) - 1]
data[, RF := shift(RF)]
data[, `Mkt-RF` := shift(`Mkt-RF`)]
data <- data[-1,]
# weekly excess return of each stock
data$ex.msft <- data$msft - data$RF
data$ex.intc <- data$intc - data$RF
data$ex.luv <- data$luv - data$RF
data$ex.mcd <- data$mcd - data$RF
data$ex.jnj <- data$jnj - data$RF
# 3. (a), (b) beta and alpha(intercept) calculation + standard deviations
out_msft <- summary(lm(data$ex.msft ~ data$`Mkt-RF`), digits = 4)
reg_msft <- rbind(out_msft$coef[, 1:2], c(out_msft$sigma, NA))
rownames(reg_msft) <- c("msft_alpha", "msft_beta", "msft_idiosyncratic")
out_intc <- summary(lm(data$ex.intc ~ data$`Mkt-RF`), digits = 4)
reg_intc <- rbind(out_intc$coef[, 1:2], c(out_intc$sigma, NA))
rownames(reg_intc) <- c("intc_alpha", "intc_beta", "intc_idiosyncratic")
out_luv <- summary(lm(data$ex.luv ~ data$`Mkt-RF`), digits = 4)
reg_luv <- rbind(out_luv$coef[, 1:2], c(out_luv$sigma, NA))
rownames(reg_luv) <- c("luv_alpha", "luv_beta", "luv_beta")
out_mcd <- summary(lm(data$ex.mcd ~ data$`Mkt-RF`), digits = 4)
reg_mcd <- rbind(out_mcd$coef[, 1:2], c(out_mcd$sigma, NA))
rownames(reg_mcd) <- c("mcd_alpha", "mcd_beta", "mcd_idiosyncratic")
out_jnj <- summary(lm(data$ex.jnj ~ data$`Mkt-RF`), digits = 4)
reg_jnj <- rbind(out_jnj$coef[, 1:2], c(out_jnj$sigma, NA))
rownames(reg_jnj) <- c("jnj_alpha", "jnj_beta", "jnj_idiosyncratic")
q3_ab <- rbind(reg_msft, reg_intc, reg_luv, reg_mcd, reg_jnj)
# 3. (c) expected returns from sample avg vs. CAPM / lowest & highest
# CAPM: E(R) = Rf + beta(E(Rm) - Rf)
beta <- rbind(out_msft$coef[2, 1], out_intc$coef[2, 1], out_luv$coef[2, 1], out_mcd$coef[2, 1], out_jnj$coef[2, 1])
CAPM <- capm(beta = beta, rf = mean(data$RF), rm.rf = mean(data$`Mkt-RF`))[, 1]
# Sample: average of each stock's weekly return
sample_avg <- as.data.frame(apply(data[, c(4:8)], MARGIN = 2, FUN = mean))
q3_c <- cbind(CAPM, sample_avg) # for Rf, should we use long-term average Rf
rownames(q3_c) <- c("msft", "intc", "luv", "mcd", "jnj")
colnames(q3_c) <- c("CAPM", "Sample")
#row.names(q3_c[which(q3_c$CAPM == max(q3_c$CAPM)), ]) # highest expected return under CAPM
#row.names(q3_c[which(q3_c$CAPM == min(q3_c$CAPM)), ]) # lowest expected return under CAPM
#<- function(beta, rf, rm.rf, price = 0, div = 0) {
##### Results -----------------------------------
q1_ab # expected return = 0.134, expected price = $39.69
q1_c # expected return = 0.1911429, expected price = $41.69 --> not sure (price: before dividend is distributed)
q2_a
q2_b
#q2_c: plot
q2_d
q3_ab
q3_c
row.names(q3_c[which(q3_c$CAPM == max(q3_c$CAPM)), ]) # highest expected return under CAPM
row.names(q3_c[which(q3_c$CAPM == min(q3_c$CAPM)), ]) # lowest expected return under CAPM
summary(luv_lm)
print(a)
library("readxl")
market_premium = 0.06
beta = 1.4
rf = 0.05
p0 = 35
#1a
capm_return = beta * market_premium + rf
#1b
p1 = p0 * (1 + capm_return)
#1c
dividend = 2
p1_d = p0 * (1 + capm_return) - dividend
#2a
# 0.02 - rf = beta_agg * (0.05 - rf)
# 0.32 - rf = beta_agg * (0.20 - rf)
beta_agg = 2
# 0.035 - rf = beta_def * (0.05 - rf)
# 0.14 - rf = beta_def * (0.2 - rf)
beta_def = 0.7
#2b
tbill = 0.08
return_agg = (tbill + beta_agg * (0.05 - tbill)) * 0.5 + 0.5 * (tbill + beta_agg * (0.2 - tbill))
return_def = (tbill + beta_def * (0.05 - tbill)) * 0.5 + 0.5 * (tbill + beta_def * (0.2 - tbill))
#2c
slope = (return_agg - return_def)/(beta_agg - beta_def)
plot(type="l",x=c(beta_agg,beta_def),y=c(return_agg,return_def),xlab = "Beta(R)",ylab = "E(R)",col = "blue",xlim = c(0,3),ylim = c(0,0.3))
abline(tbill,slope, col = "blue")
points(beta_agg,return_agg,pch=19,col="red")
points(beta_def,return_def,pch = 19, col="green")
text(beta_agg,return_agg,pch=19,col="red",labels = "Aggressive",pos = 3)
text(beta_def,return_def,pch=19,col="green",labels = "Defensive",pos = 1)
companies = c("MSFT","INTC","LUV","MCD","JNJ")
data = data.frame(msft=0,intc=0,luv=0,mcd=0,jnj=0)
colnames(data) = companies
msft = read_excel("lecture8p.xlsx",sheet = "MSFT")
intc = read_excel("lecture8p.xlsx",sheet = "INTC")
luv = read_excel("lecture8p.xlsx",sheet = "LUV")
mcd = read_excel("lecture8p.xlsx", sheet = "MCD")
jnj = read_excel("lecture8p.xlsx", sheet = "JNJ")
rf = read_excel("lecture8p.xlsx", sheet = "F-F_Research_Data_Factors_daily", skip = 4)
rf = rf[rf$X__1 >= "19900101",]
rf = rf/100
data = cbind(msft$`Adj Close`,intc$`Adj Close`,luv$`Adj Close`,mcd$`Adj Close`,jnj$`Adj Close`)
colnames(data) = companies
for (i in 1:5){
return = data[-1,i] / data[-nrow(data),i] - 1
data[-1,i] = return
}
data = data[-1,]
msft_lm = lm((data[,1] - rf$RF) ~ rf$`Mkt-RF`)
intc_lm = lm((data[,2] - rf$RF) ~ rf$`Mkt-RF`)
luv_lm = lm((data[,3] - rf$RF) ~ rf$`Mkt-RF`)
mcd_lm = lm((data[,4] - rf$RF) ~ rf$`Mkt-RF`)
jnj_lm = lm((data[,5] - rf$RF) ~ rf$`Mkt-RF`)
alpha_beta_msft = summary(msft_lm)$coef[,1:2]
rownames(alpha_beta_msft) = c("alpha","beta")
colnames(alpha_beta_msft) = c("estimates","standard deviation")
idiosyncratic_msft = summary(msft_lm)$sigma
alpha_beta_intc = summary(intc_lm)$coef[,1:2]
rownames(alpha_beta_intc) = c("alpha","beta")
colnames(alpha_beta_intc) = c("estimates","standard deviation")
idiosyncratic_intc = summary(intc_lm)$sigma
alpha_beta_luv = summary(luv_lm)$coef[,1:2]
rownames(alpha_beta_luv) = c("alpha","beta")
colnames(alpha_beta_luv) = c("estimates","standard deviation")
idiosyncratic_luv = summary(luv_lm)$sigma
alpha_beta_mcd = summary(mcd_lm)$coef[,1:2]
rownames(alpha_beta_mcd) = c("alpha","beta")
colnames(alpha_beta_mcd) = c("estimates","standard deviation")
idiosyncratic_mcd = summary(mcd_lm)$sigma
alpha_beta_jnj = summary(jnj_lm)$coef[,1:2]
rownames(alpha_beta_jnj) = c("alpha","beta")
colnames(alpha_beta_jnj) = c("estimates","standard deviation")
idiosyncratic_jnj = summary(jnj_lm)$sigma
highest_return = max(c(alpha_beta_msft["beta","estimates"],alpha_beta_intc["beta","estimates"],alpha_beta_luv["beta","estimates"],alpha_beta_mcd["beta","estimates"],alpha_beta_jnj["beta","estimates"]))
mean_returns = matrix(nrow = 1,ncol = 5)
mean_returns[1,] = c(alpha_beta_msft["beta","estimates"],alpha_beta_intc["beta","estimates"],alpha_beta_luv["beta","estimates"],alpha_beta_mcd["beta","estimates"],alpha_beta_jnj["beta","estimates"])
colnames(mean_returns) = companies
high_mean = names(mean_returns[,which(mean_returns[1,] == max(mean_returns[1,]))])
low_mean = names(mean_returns[,which(mean_returns[1,] == min(mean_returns[1,]))])
returns = matrix(nrow = 1,ncol = 5)
for (i in 1:5){
returns[1,i] = mean(data[,i])
}
colnames(returns) = companies
names(returns) = companies
high = names(returns[,which(returns[1,] == max(returns[1,]))])
low = names(returns[,which(returns[1,] == min(returns[1,]))])
returns[,which(returns[1,] == max(returns[1,]))]
returns[,which(returns[1,] == min(returns[1,]))]
mean_returns[,which(mean_returns[1,] == max(mean_returns[1,]))]
mean_returns[,which(mean_returns[1,] == min(mean_returns[1,]))]
