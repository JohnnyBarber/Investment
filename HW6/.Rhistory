getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
MSFT(endpoints(data,"weeks",k=1)[-1])
MSFT[endpoints(data,"weeks",k=1)[-1]]
head(MSFT)
MSFT[endpoints(data,"weeks",k=1)[-1],6]
MSFT[1,6]
MSFT[c(1,2),6]
week_end = endpoints(data,"weeks",k=1)[-1]
MSFT[endpoints(MSFT,"weeks",k=1)[-1],6]
weekly_price = MSFT[endpoints(MSFT,"weeks",k=1)[-1],6]
a = c(1,2,3,4)
b = a[-1]
b
a
weekly_return = weekly_price[-1] / weekly_price[-length(weekly_price)] - 1
head(weekly_return)
weekly_return = weekly_price[-1] / weekly_price[-length(weekly_price)]
weekly_return
length(weekly_price[-1])
length(weekly_price[-length(weekly_price)])
head(weekly_price[-1])
head(weekly_price[-length(weekly_price)])
0.453629 / 0.440343
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
tail(week_end)
tail(week_start)
week_end /week_start
weekly_price[2] / weekly_price[1]
weekly_price
class(weekly_price)
weekly_price = as.vector(MSFT[endpoints(MSFT,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
week_end / week_start
weekly_return = week_end / week_start - 1
head(weekly_return)
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = (1 + mean)^52 -1
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
r_it = w_it * stats_it[[2]][3] + w_f_it * R_f
r_ms = w_ms * stats_ms[[2]][3] + w_f_ms * R_f
r_it - r_ms
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(c(1:10000)/10000)
sds = sd_func(c(1:10000)/10000)
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = 3267 / 10000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = (1 + mean)^52 -1
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
r_it = w_it * stats_it[[2]][3] + w_f_it * R_f
r_ms = w_ms * stats_ms[[2]][3] + w_f_ms * R_f
r_it - r_ms
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(c(1:10000)/10000)
sds = sd_func(c(1:10000)/10000)
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = 3267 / 10000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
annualized_mean = mean * 52
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = mean * 52
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = mean * 52
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
r_it = w_it * stats_it[[2]][3] + w_f_it * R_f
r_ms = w_ms * stats_ms[[2]][3] + w_f_ms * R_f
r_it - r_ms
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(c(1:10000)/10000)
sds = sd_func(c(1:10000)/10000)
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = 3267 / 10000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
utility = function(E,w,V){
return(w * (E - R_f) + R_f - A / 2 * w^2 * V)
}
utility_ms = utility(E = stats_ms[[2]][3], w = w_ms, V = stats_ms[[2]][4]^2)
utility_it = utility(E = stats_it[[2]][3], w = w_it, V = stats_it[[2]][4]^2)
utility_ms - utility_it
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = mean * 52
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
utility = function(E,w,V){
return(w * (E - R_f) + R_f - A / 2 * w^2 * V)
}
utility_ms = utility(E = stats_ms[[2]][3], w = w_ms, V = stats_ms[[2]][4]^2)
utility_it = utility(E = stats_it[[2]][3], w = w_it, V = stats_it[[2]][4]^2)
utility_ms - utility_it
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(c(1:10000)/10000)
sds = sd_func(c(1:10000)/10000)
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = 3267 / 10000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
correlation = cor(stats_ms[[1]],stats_it[[1]])
seq(0,1,0.1)
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = mean * 52
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
utility = function(E,w,V){
return(w * (E - R_f) + R_f - A / 2 * w^2 * V)
}
utility_ms = utility(E = stats_ms[[2]][3], w = w_ms, V = stats_ms[[2]][4]^2)
utility_it = utility(E = stats_it[[2]][3], w = w_it, V = stats_it[[2]][4]^2)
utility_ms - utility_it
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(seq(0,1,0.001))
sds = sd_func(seq(0,1,0.001))
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = 3267 / 10000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
which.min(sds)
returns = return_func(seq(0,1,0.0001))
sds = sd_func(seq(0,1,0.0001))
plot(x=sds,y=returns,type = "l")
which.min(sds)
returns = return_func(seq(0,1,0.001))
sds = sd_func(seq(0,1,0.001))
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = (which.min(sds) - 1) / 1000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
utility_ms
utility_it
plot(diff(lnAadjusted))
library("quantmod")
getSymbols("AAPL",getSymbols.yahoo.warning = FALSE)
lnAadjusted = as.vector(log(AAPL[,6]))
plot(diff(lnAadjusted))
out = lm(diff(lnAadjusted) ~ back(diff(lnAadjusted)))
library("quantmod")
getSymbols("AAPL",getSymbols.yahoo.warning = FALSE)
lnAadjusted = as.vector(log(AAPL[,6]))
plot(diff(lnAadjusted))
out = lm(diff(lnAadjusted) ~ back(diff(lnAadjusted)))
AAPL
u = matrix(c(0.01,0.015,0.025),nrow = 3,ncol = 1,byrow = TRUE)
sigma = matrix(c(0.0016,0.0010,0.0015,0.0010,0.002,0.0019,0.0015,0.0019,0.0042),nrow = 3,
ncol = 3, byrow = TRUE)
diagnal = sqrt(diag(sigma))^-1
diagnal_matrix = diag(diagnal,nrow = 3,ncol = 3)
sigma %*% diagnal_matrix * diagnal
weights = matrix(c(0.3,0.4,0.3),nrow = 1,ncol = 3,byrow = TRUE)
mean = weights %*% u
sd = sqrt(weights %*% sigma %*% t(weights))
cat("The mean and standard deviation of the portfolio are", mean, "and", sd, "correspondingly")
library("quantmod")
getSymbols("AAPL",getSymbols.yahoo.warning = FALSE)
lnAadjusted = log(AAPL[,6])
plot(diff(lnAadjusted))
out = lm(diff(lnAadjusted) ~ back(diff(lnAadjusted)))
library("quantmod")
getSymbols("AAPL",getSymbols.yahoo.warning = FALSE)
lnAadjusted = log(AAPL[,6])
plot(diff(lnAadjusted))
acf(diff(lnAadjusted),na.action = na.omit)
data("countryret")
y = countryret$usa
mysoln = list(student = c("Huanyu Liu", "Hyeuk Jung", "Jiaqi Li", "Xichen Luo"))
library("quantmod")
library("xts")
getSymbols("MSFT",from="1989-12-29",to="2018-09-29")
getSymbols("INTC",from="1989-12-29",to="2018-09-29")
MSFT = as.xts(MSFT)
INTC = as.xts(INTC)
result = list()
myfunc = function(data){
weekly_price = as.vector(data[endpoints(data,"weeks",k=1)[-1],6])
week_start = weekly_price[-length(weekly_price)]
week_end = weekly_price[-1]
weekly_return = week_end / week_start - 1
mean = mean(weekly_return)
sd = sd(weekly_return)
annualized_mean = mean * 52
annualized_sd = sd * sqrt(52)
result[[1]] = weekly_return
result[[2]] = c(mean,sd,annualized_mean,annualized_sd)
return(result)
}
stats_ms = myfunc(MSFT)
stats_it = myfunc(INTC)
mysoln[["Q1"]] = list("intel" = stats_it[[2]],"microsoft" = stats_ms[[2]])
R_f = 0.01
A = 4
w_it = (stats_it[[2]][3] - R_f)/(A * stats_it[[2]][4]^2)
w_f_it = 1 - w_it
w_ms = (stats_ms[[2]][3] - R_f)/(A * stats_ms[[2]][4]^2)
w_f_ms = 1 - w_ms
mysoln[["Q2"]] = list("intel-RF" = c(w_it, w_f_it),"microsoft-RF" = c(w_ms,w_f_ms))
utility = function(E,w,V){
return(w * (E - R_f) + R_f - A / 2 * w^2 * V)
}
utility_ms = utility(E = stats_ms[[2]][3], w = w_ms, V = stats_ms[[2]][4]^2)
utility_it = utility(E = stats_it[[2]][3], w = w_it, V = stats_it[[2]][4]^2)
utility_ms - utility_it
#choose microsoft, because of the higher return of the portforlio
mysoln[["Q3"]] = c("microsoft",r_it - r_ms)
correlation = cor(stats_ms[[1]],stats_it[[1]])
return_func = function(weight){
return(weight * stats_it[[2]][3] + (1 - weight) * stats_ms[[2]][3])
}
sd_func = function(weight){
return(sqrt(weight^2 * stats_it[[2]][4]^2 + (1 - weight)^2 * stats_ms[[2]][4]^2 + 2 * weight * (1 - weight) * correlation * stats_it[[2]][4] * stats_ms[[2]][4]))
}
returns = return_func(seq(0,1,0.001))
sds = sd_func(seq(0,1,0.001))
plot(x=sds,y=returns,type = "l")
which.min(sds)
min_var_it_weight = (which.min(sds) - 1) / 1000
min_var_ms_weight = 1 - min_var_it_weight
min_var_return = return_func(min_var_it_weight)
mysoln[["Q4"]] = list("intel_weight" = min_var_it_weight, "microsoft_weight" = min_var_ms_weight, "min_return" = min_var_return, "min_var" = min(sds))
mysoln
#1-----------------------------------------
library(quantmod)
getSymbols("INTC", src = "yahoo", from = "1989-12-29")
getSymbols("MSFT", src = "yahoo", from = "1989-12-29")
INTC = INTC["1989-12-29/2018-09-28"]
MSFT = MSFT["1989-12-29/2018-09-28"]
last_INTC = with(INTC, apply.weekly(INTC.Adjusted, last))
last_MSFT = with(MSFT, apply.weekly(MSFT.Adjusted, last))
n = length(last_INTC)
weekly_INTC = last_INTC[-1]/lag(last_INTC)-1
weekly_MSFT = last_MSFT[-1]/lag(last_MSFT)-1
mu_INTC = mean(weekly_INTC)
std_INTC = sd(weekly_INTC)
mu_MSFT = mean(weekly_MSFT)
std_MSFT = sd(weekly_MSFT)
mu_annu_INTC = mu_INTC*52
std_annu_INTC = sqrt(52)*std_INTC
mu_annu_MSFT = mu_MSFT*52
std_annu_MSFT = sqrt(52)*std_MSFT
#2--------------------------------------------
A = 4
Rf = 0.01
w_INTC = (mu_annu_INTC-Rf)/(A*std_annu_INTC^2)
w_MSFT = (mu_annu_MSFT-Rf)/(A*std_annu_MSFT^2)
#3--------------------------------------------
U_INTC = w_INTC*(mu_annu_INTC-Rf)+Rf-A/2*w_INTC^2*std_annu_INTC^2
U_MSFT = w_MSFT*(mu_annu_MSFT-Rf)+Rf-A/2*w_MSFT^2*std_annu_MSFT^2
#4--------------------------------------------
w = seq(from = 0, to = 1, by = 0.001)
E = w*mu_annu_INTC+(1-w)*mu_annu_MSFT
covariance_r = as.vector(std_annu_INTC*std_annu_MSFT*cor(weekly_INTC,weekly_MSFT))
sigma = sqrt(w^2*std_annu_INTC^2+(1-w)^2*std_annu_MSFT^2+2*w*(1-w)*covariance_r)
plot(sigma, E, type = "l", main = "mean-variance frontier",
xlab = "standard deviation", ylab = "expected return",
xlim = c(0.27,0.365), ylim = c(0.215,0.24))
grid(NULL,NULL, col = "lightgrey", lty = "dotted")
points(std_annu_MSFT,mu_annu_MSFT, pch = 19)
points(std_annu_INTC,mu_annu_INTC, pch = 19)
text(std_annu_MSFT,mu_annu_MSFT,labels = "MSFT",pos = 4)
text(std_annu_INTC,mu_annu_INTC,labels = "INTC",pos = 3)
min_sigma = min(sigma)
pos = which(sigma == min_sigma)
best_E = E[pos]
w_best_INTC = (best_E-mu_annu_MSFT)/(mu_annu_INTC-mu_annu_MSFT)
points(min_sigma, best_E, pch = 19)
text(min_sigma, best_E, labels = "global minimum-variance portfolio", pos = 4)
w_effi = seq(from = 0, to = w_best_INTC, by = 0.001)
E_effi = w_effi*mu_annu_INTC+(1-w_effi)*mu_annu_MSFT
sigma_effi = sqrt(w_effi^2*std_annu_INTC^2+(1-w_effi)^2*std_annu_MSFT^2+2*w_effi*(1-w_effi)*covariance_r)
lines(sigma_effi, E_effi,type = "l", col = "red")
legend("topright", legend = "efficient frontier", lty = 1, col = "red")
#curve between the "global minimum-variance portfolio" and the "MSFT"
#is the efficient frontier (red line)
View(INTC)
x_weights <- seq(from = 0, to = 1, length.out = 1000)
wx=rep(x_weights, each = length(x_weights)
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights))
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
View(three_assets)
three_assets[, wz := 1 - wx - wy]
View(three_assets)
x_weights <- seq(from = 0, to = 1, length.out = 1000)
wx=rep(x_weights, each = length(x_weights))
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
View(three_assets)
?rep()
rep(from = 0, to = 1, length.out = 1000, each = 2)
x_weights <- seq(from = 0, to = 1, length.out = 1000,each = length(x_weights))
x_weights <- seq(from = 0, to = 1, length.out = 1000,each = length(3))
x_weights <- seq(from = 0, to = 1, length.out = 1000,each = 3)
